from machine import unique_id, ADC, Pinimport machineimport timeimport networkimport ubinasciiimport wifi_utilsimport startfrom umqtt.simple import MQTTClientimport esp32import ujson as jsonimport dhtimport logginglogging.basicConfig(level=logging.INFO)log = logging.getLogger("main")unique_id = ubinascii.hexlify(unique_id()).decode("utf-8")log.info("device unique id: {}".format(unique_id))def mqtt_log(client, log_str):    log.info(log_str)    client.publish("log/{}".format(unique_id), log_str)def callback_action(topic, msg):    pin = Pin(15, Pin.OUT, value=0)    try:        if msg == b"ON":            pin.on()            mqtt_client.publish(unique_id, "ON")        elif msg == b"OFF":            pin.off()            mqtt_client.publish(unique_id, "OFF")        else:            log.warning("invalid message: {}".format(msg))            mqtt_client.publish(unique_id, "Invalide message {}".format(msg))    except:        log.error("failed to parse topic message:L {}".format(msg))        mqtt_client.publish(unique_id, "failed to parse topic message:L {}".format(msg))def read_soil_sensor(pin_num):    adc = ADC(Pin(pin_num))    adc.atten(ADC.ATTN_11DB)    return adc.read()def read_dht_sensor(pin_num):    result = {"temp": 0, "humidity": 0}    try:        d = dht.DHT11(Pin(pin_num))        d.measure()        result['temp'] = d.temperature()        result['humidity'] = d.humidity()    except Exception as e:        import sys        sys.print_exception(e)    return result# mac_addr = ubinascii.hexlify(network.WLAN().config('mac'), ":").decode()log.info("ssid list: {}".format(wifi_utils.get_ssid_list()))ssid = wifi_utils.wifi_conf['ssid']ssid_pass = wifi_utils.wifi_conf['ssid_pass']wifi_list = wifi_utils.get_ssid_list()wifi_utils.connect_wifi(ssid, ssid_pass)time.sleep(5)mqtt_client = MQTTClient(    unique_id,    wifi_utils.get_mqtt_broker(),    user=wifi_utils.get_mqtt_user(),    password=wifi_utils.get_mqtt_pass())try:    mqtt_client.set_callback(callback_action)    mqtt_client.connect()    mqtt_client.subscribe("action/{}".format(unique_id))    # mqtt_client.disconnect()    mqtt_connected = True    log.info("Connected to MQTT broker: {}".format(mqtt_connected))except Exception as e:    import sys    sys.print_exception(e)    mqtt_connected = Falsetry:    start.start_webserver()except Exception as e:    import sys    sys.print_exception(e)    mqtt_connected = False    machine.reset()last_check = time.time() - 30last_mqtt_check = time.time() - 300while True:    mqtt_client.check_msg()    if (time.time() - last_check) > wifi_utils.get_publish_interval():        raw_temp = str(esp32.raw_temperature())        soil_sensor_reading = str(read_soil_sensor(32))        dht11 = read_dht_sensor(33)        sleep_time = int(wifi_utils.get_publish_interval())        log.info(            "raw temp: {}, soil sensor reading: {}, dht11 reading: {}".format(raw_temp, soil_sensor_reading, dht11))        ifconfig = wifi_utils.get_ifconfig()        ip = ifconfig[0]        payload = {"soil_moist": "", "raw_temp": "", "air_hum": "", "air_temp": "", "ip_addr": ip}        payload['soil_moist'] = soil_sensor_reading        payload['raw_temp'] = raw_temp        payload['air_temp'] = dht11['temp']        payload['air_hum'] = dht11['humidity']        payload['device_name'] = wifi_utils.get_device_name()        mqtt_client.publish("id", unique_id)        mqtt_client.publish("sensor_data/{}".format(unique_id), json.dumps(payload))        if wifi_utils.is_connect_to_ap() and wifi_utils.get_low_power_mode():            machine.deepsleep(sleep_time * 1000)            wifi_utils.ap_if.active(False)        elif wifi_utils.is_connect_to_ap():            wifi_utils.ap_if.active(False)        else:            wifi_utils.ap_if.active(True)        last_check = time.time()    if (time.time() - last_mqtt_check) > 350:        mqtt_log(mqtt_client, "reconnecting")        mqtt_client.connect()        mqtt_client.subscribe("action/{}".format(unique_id))        last_mqtt_check = time.time()        mqtt_log(mqtt_client, "reconnected")    time.sleep(1)