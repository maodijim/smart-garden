from machine import unique_id, ADC, Pinimport machineimport timeimport networkimport ubinasciiimport wifi_utilsimport startfrom umqtt.simple import MQTTClientimport esp32import ujson as jsonimport dhtimport logginglogging.basicConfig(level=logging.INFO)log = logging.getLogger("main")unique_id = ubinascii.hexlify(unique_id()).decode("utf-8")log.info(unique_id)def read_soil_sensor(pin_num):    adc = ADC(Pin(pin_num))    adc.atten(ADC.ATTN_11DB)    return adc.read()def read_dht_sensor(pin_num):    result = {"temp": 0, "humidity": 0}    try:      d = dht.DHT11(Pin(pin_num))      d.measure()      result['temp'] = d.temperature()      result['humidity'] = d.humidity()    except Exception as e:      import sys      sys.print_exception(e)    return result# mac_addr = ubinascii.hexlify(network.WLAN().config('mac'), ":").decode()print(wifi_utils.get_ssid_list())ssid = wifi_utils.wifi_conf['ssid']ssid_pass = wifi_utils.wifi_conf['ssid_pass']wifi_list = wifi_utils.get_ssid_list()wifi_utils.connect_wifi(ssid, ssid_pass)time.sleep(5)try:    start.start_webserver()except:    machine.reset()while True:    raw_temp = str(esp32.raw_temperature())    soil_sensor_reading = str(read_soil_sensor(32))    dht11 = read_dht_sensor(33)    sleep_time = int(wifi_utils.wifi_conf.get('publish_interval', 30))    print(raw_temp, soil_sensor_reading, dht11)    ifconfig = wifi_utils.get_ifconfig()    ip = ifconfig[0]    payload = {"soil_moist": "", "raw_temp": "", "air_hum": "", "air_temp": "", "ip_addr": ip}    payload['soil_moist'] = soil_sensor_reading    payload['raw_temp'] = raw_temp    payload['air_temp'] = dht11['temp']    payload['air_hum'] = dht11['humidity']    payload['device_name'] = wifi_utils.wifi_conf['device_name']    mqtt_connected = False    try:        mqtt_client = MQTTClient(unique_id, wifi_utils.wifi_conf.get("mqtt_broker", ""))        mqtt_client.connect()        mqtt_client.publish("sensor_data/{}".format(unique_id), json.dumps(payload))        mqtt_client.disconnect()        mqtt_connected = True    except Exception as e:        import sys        sys.print_exception(e)        mqtt_connected = False    log.info("Connected to MQTT broker: {}".format(mqtt_connected))    if wifi_utils.is_connect_to_ap() and wifi_utils.wifi_conf.get('low_power_mode', False):        machine.deepsleep(sleep_time * 1000)        wifi_utils.ap_if.active(False)    elif wifi_utils.is_connect_to_ap():        wifi_utils.ap_if.active(False)        time.sleep(sleep_time)    else:        wifi_utils.ap_if.active(True)        time.sleep(sleep_time)