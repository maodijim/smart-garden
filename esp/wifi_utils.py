import networkimport ujson as jsonimport loggingimport machinelogging.basicConfig(level=logging.INFO)log = logging.getLogger("wifi_utils")sta_if = network.WLAN(network.STA_IF)ap_if = network.WLAN(network.AP_IF)wifi_config_file = "configs/wifi.conf"wifi_conf = json.load(open(wifi_config_file, "r"))log.info("wifi config: {}".format(wifi_conf))ssid_list = []def get_mqtt_user():    return wifi_conf.get("mqtt_user", "")def get_mqtt_pass():    return wifi_conf.get("mqtt_pass", "")def get_low_power_mode():    return wifi_conf.get("low_power_mode", "false").lower() == "true"def get_wifi_pass():    return wifi_conf.get("ssid_pass", "")def get_publish_interval():    return wifi_conf.get("publish_interval", 30)def get_mqtt_broker():    return wifi_conf.get("mqtt_broker", "")def get_device_name():    return wifi_conf.get("device_name", "New Device")def get_ssid_list():    if not sta_if.active():        sta_if.active(True)    wifi_connected = sta_if.isconnected()    if wifi_connected:        sta_if.disconnect()    found_ssid = sta_if.scan()    for ssid in found_ssid:        ssid_list.append(ssid[0])    log.info(ssid_list)    if wifi_connected:        connect_wifi(wifi_conf["ssid"], wifi_conf["ssid_pass"])    return ssid_listdef connect_wifi(ssid, ssid_pass):    if ssid and ssid_pass:        sta_if.connect(wifi_conf['ssid'], wifi_conf['ssid_pass'])    else:        logging.info("wifi confi empty")def save_setting(ssid, ssidpass, mqtt_broker, mqtt_user, mqtt_pass, low_power_mode, publish_interval, device_name):    try:        log.info("{} {} {} {} {}".format(ssid, ssidpass, mqtt_broker, low_power_mode, publish_interval))        if ssid:            wifi_conf['ssid'] = ssid        if ssidpass:            wifi_conf['ssid_pass'] = ssidpass        if mqtt_broker:            wifi_conf['mqtt_broker'] = mqtt_broker        if mqtt_user:            wifi_conf["mqtt_user"] = mqtt_user        if mqtt_pass:            wifi_conf["mqtt_pass"] = mqtt_pass        if publish_interval:            wifi_conf['publish_interval'] = int(publish_interval)        if str(low_power_mode).lower() == 'true' or str(low_power_mode).lower() == 'false':            wifi_conf['low_power_mode'] = str(low_power_mode).lower()        wifi_conf['device_name'] = device_name        f = open(wifi_config_file, 'w')        f.write(json.dumps(wifi_conf))        f.close()        log.info("setting saved")    except Exception as e:        import sys        sys.print_exception(e)        log.error("Failed to save setting")def is_connect_to_ap():    return sta_if.isconnected()def get_ifconfig():    if is_connect_to_ap:        return sta_if.ifconfig()    return ()